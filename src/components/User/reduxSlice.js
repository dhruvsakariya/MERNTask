import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { getUserDetails, updateUserProfile } from "./reduxAPI";

// icon
// import { Icon } from "@iconify/react";

const initialState = {
  loading: false,
  isAuth: false,
  token: null,

  firstName: "",
  lastName: "",
  education: "",
  email: "",
  mobile: "",
  profileUrl: "",
  gender: "",
  address: "",
  socialMedia: {},
  Hobbies: [],
  Skills: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(createUserAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getUserAsync = createAsyncThunk(
  "user/getUser",
  async ({ navigate }, { dispatch, getState, rejectWithValue }) => {
    try {
      const tokenRedux = getState().user.token;
      const response = await getUserDetails(tokenRedux);

      return response.data.userProfile;
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

export const updateUserAsync = createAsyncThunk(
  "user/updateUser",
  async ({ _ }, { dispatch, getState, rejectWithValue }) => {
    try {
      const {
        firstName,
        lastName,
        education,
        email,
        mobile,
        profileUrl,
        gender,
        address,
        socialMedia,
        Hobbies,
        Skills,
      } = getState().user;
      const tokenRedux = getState().user.token;
      const updateDetails = {
        firstName,
        lastName,
        education,
        email,
        mobile,
        profileUrl,
        gender,
        address,
        socialMedia,
        Hobbies,
        Skills,
      };
      const response = await updateUserProfile(tokenRedux, updateDetails);
      console.log({response})
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setIsAuth: (state, action) => {
      state.isAuth = action.payload.isAuth;

      if (action.payload.token) {
        console.log("token ", action.payload.token);
        state.token = action.payload.token;
      }

      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
    },

    // update profile
    setFirstName: (state, action) => {
      state.firstName = action.payload.value;
    },
    setLasttName: (state, action) => {
      state.lastName = action.payload.value;
    },
    setMobileNum: (state, action) => {
      state.mobile = action.payload.value;
    },
    setGender: (state, action) => {
      state.gender = action.payload.value;
    },
    setAddress: (state, action) => {
      state.address = action.payload.value;
    },
    setEducation: (state, action) => {
      state.education = action.payload.value;
    },
    setSocialMediaPersonal: (state, action) => {
      state.socialMedia.personal = action.payload.value;
    },
    setSocialMediaGithub: (state, action) => {
      state.socialMedia.github = action.payload.value;
    },
    setSocialMediaTwitter: (state, action) => {
      state.socialMedia.twitter = action.payload.value;
    },
    setSocialMediaInstagram: (state, action) => {
      state.socialMedia.instagram = action.payload.value;
    },
    setSocialMediaFacebook: (state, action) => {
      state.socialMedia.facebook = action.payload.value;
    },
    setHobbies: (state, action) => {
      state.Hobbies[action.payload.index].name = action.payload.value;
    },
    setSkills: (state, action) => {
      state.Skills[action.payload.index].name = action.payload.value;
    },
    setHobbiesValue: (state, action) => {
      state.Hobbies[
        action.payload.index
      ].skillRate = `${action.payload.value}%`;
    },
    setSkillsValue: (state, action) => {
      state.Skills[action.payload.index].skillRate = `${action.payload.value}%`;
    },

    setProfileUrl:(state,action)=>{
      state.profileUrl = action.payload.value;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserAsync.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(getUserAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.firstName = action.payload.firstName;
        state.lastName = action.payload.lastName;
        state.education = action.payload.education;
        state.email = action.payload.email;
        state.mobile = action.payload.mobile;
        state.profileUrl = action.payload.profileUrl;
        state.gender = action.payload.gender;
        state.address = action.payload.address;
        state.socialMedia = action.payload.socialMedia;
        state.Hobbies = action.payload.Hobbies;
        state.Skills = action.payload.Skills;
      })
      .addCase(getUserAsync.rejected, (state, action) => {
        state.loading = false;
      })
      .addCase(updateUserAsync.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(updateUserAsync.fulfilled, (state, action) => {
        state.loading = false;
      })
      .addCase(updateUserAsync.rejected, (state, action) => {
        state.loading = false;
      });
  },
});

export const {
  setIsAuth,
  setFirstName,
  setLasttName,
  setMobileNum,
  setGender,
  setAddress,
  setEducation,
  setSocialMediaPersonal,
  setSocialMediaGithub,
  setSocialMediaTwitter,
  setSocialMediaInstagram,
  setSocialMediaFacebook,
  setHobbies,
  setHobbiesValue,
  setSkills,
  setSkillsValue,setProfileUrl,
} = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const userState = (state) => state.user;

export default userSlice.reducer;
