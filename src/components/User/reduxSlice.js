import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { getUserDetails, updateUserProfile } from "./reduxAPI";

// icon
// import { Icon } from "@iconify/react";

const initialState = {
  loading: false,
  userAvl: false,

  firstName: "",
  lastName: "",
  education: "",
  email: "",
  mobile: "",
  profileUrl: "",
  gender: "",
  address: "",
  socialMedia: {},
  Hobbies: [],
  Skills: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(createUserAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getUserAsync = createAsyncThunk(
  "user/getUser",
  async ({  navigate }, { dispatch, getState, rejectWithValue }) => {
    try {
      const response = await getUserDetails();

      return response.data.userProfile;
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

export const updateUserAsync = createAsyncThunk(
  "user/updateUser",
  async ({ _ }, { dispatch, getState, rejectWithValue }) => {
    try {
      const response = await updateUserProfile();

    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUserAvl: (state, action) => {
      state.userAvl = action.payload.userAvl;
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserAsync.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(getUserAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.firstName = action.payload.firstName;
        state.lastName = action.payload.lastName;
        state.education = action.payload.education;
        state.email = action.payload.email;
        state.mobile = action.payload.mobile;
        state.profileUrl = action.payload.profileUrl;
        state.gender = action.payload.gender;
        state.address = action.payload.address;
        state.socialMedia = action.payload.socialMedia;
        state.Hobbies = action.payload.Hobbies;
        state.Skills = action.payload.Skills;

      
      })
      .addCase(getUserAsync.rejected, (state, action) => {
        state.loading = false;
      })
      .addCase(updateUserAsync.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(updateUserAsync.fulfilled, (state, action) => {
        state.loading = false;
      })
      .addCase(updateUserAsync.rejected, (state, action) => {
        state.loading = false;
      });
  },
});

export const { setUserAvl } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const userState = (state) => state.user;

export default userSlice.reducer;
